{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`Making ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} request to: ${config.url}`);\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  console.log(`Response from ${response.config.url}:`, response.status);\n  return response;\n}, error => {\n  var _error$response;\n  console.error('Response error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\n\n// API functions\nexport const menuAPI = {\n  // Get menu for a restaurant by slug\n  getMenu: async slug => {\n    try {\n      const response = await api.get(`/menu/${slug}`);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch menu');\n    }\n  },\n  // Add new menu item\n  addMenuItem: async menuItem => {\n    try {\n      const response = await api.post('/menu/add', menuItem);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to add menu item');\n    }\n  },\n  // Update menu item\n  updateMenuItem: async (id, menuItem) => {\n    try {\n      const response = await api.put(`/menu/${id}`, menuItem);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to update menu item');\n    }\n  },\n  // Delete menu item\n  deleteMenuItem: async id => {\n    try {\n      const response = await api.delete(`/menu/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to delete menu item');\n    }\n  }\n};\nexport const qrAPI = {\n  // Generate QR code for restaurant\n  generateQR: async (slug, options = {}) => {\n    try {\n      const response = await api.get(`/qr/${slug}`, {\n        params: options\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to generate QR code');\n    }\n  },\n  // Download QR code as PNG\n  downloadQR: async (slug, options = {}) => {\n    try {\n      const response = await api.get(`/qr/${slug}/download`, {\n        params: options,\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to download QR code');\n    }\n  }\n};\n\n// Health check\nexport const healthCheck = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    throw new Error('API is not available');\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","data","message","menuAPI","getMenu","slug","get","_error$response2","_error$response2$data","Error","addMenuItem","menuItem","post","_error$response3","_error$response3$data","updateMenuItem","id","put","_error$response4","_error$response4$data","deleteMenuItem","delete","_error$response5","_error$response5$data","qrAPI","generateQR","options","params","_error$response6","_error$response6$data","downloadQR","responseType","_error$response7","_error$response7$data","healthCheck"],"sources":["C:/menu card/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with base URL\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`Making ${config.method?.toUpperCase()} request to: ${config.url}`);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(`Response from ${response.config.url}:`, response.status);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('Response error:', error.response?.data || error.message);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// API functions\r\nexport const menuAPI = {\r\n  // Get menu for a restaurant by slug\r\n  getMenu: async (slug) => {\r\n    try {\r\n      const response = await api.get(`/menu/${slug}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to fetch menu');\r\n    }\r\n  },\r\n\r\n  // Add new menu item\r\n  addMenuItem: async (menuItem) => {\r\n    try {\r\n      const response = await api.post('/menu/add', menuItem);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to add menu item');\r\n    }\r\n  },\r\n\r\n  // Update menu item\r\n  updateMenuItem: async (id, menuItem) => {\r\n    try {\r\n      const response = await api.put(`/menu/${id}`, menuItem);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to update menu item');\r\n    }\r\n  },\r\n\r\n  // Delete menu item\r\n  deleteMenuItem: async (id) => {\r\n    try {\r\n      const response = await api.delete(`/menu/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to delete menu item');\r\n    }\r\n  },\r\n};\r\n\r\nexport const qrAPI = {\r\n  // Generate QR code for restaurant\r\n  generateQR: async (slug, options = {}) => {\r\n    try {\r\n      const response = await api.get(`/qr/${slug}`, { params: options });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to generate QR code');\r\n    }\r\n  },\r\n\r\n  // Download QR code as PNG\r\n  downloadQR: async (slug, options = {}) => {\r\n    try {\r\n      const response = await api.get(`/qr/${slug}/download`, { \r\n        params: options,\r\n        responseType: 'blob'\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to download QR code');\r\n    }\r\n  },\r\n};\r\n\r\n// Health check\r\nexport const healthCheck = async () => {\r\n  try {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('API is not available');\r\n  }\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}