{"ast":null,"code":"import axios from'axios';// Create axios instance with base URL\n// Dynamically determine API URL based on current host\nconst getApiUrl=()=>{const hostname=window.location.hostname;if(hostname==='localhost'||hostname==='127.0.0.1'){return'http://localhost:5000/api';}else{// For network access, use the same hostname but port 5000\nreturn\"http://\".concat(hostname,\":5000/api\");}};const api=axios.create({baseURL:process.env.REACT_APP_API_URL||getApiUrl(),timeout:10000,headers:{'Content-Type':'application/json'}});// Request interceptor\napi.interceptors.request.use(config=>{var _config$method;console.log(\"Making \".concat((_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),\" request to: \").concat(config.url));return config;},error=>{console.error('Request error:',error);return Promise.reject(error);});// Response interceptor\napi.interceptors.response.use(response=>{console.log(\"Response from \".concat(response.config.url,\":\"),response.status);return response;},error=>{var _error$response;console.error('Response error:',((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data)||error.message);return Promise.reject(error);});// API functions\nexport const menuAPI={// Get menu for a restaurant by slug\ngetMenu:async slug=>{try{const response=await api.get(\"/menu/\".concat(slug));return response.data;}catch(error){var _error$response2,_error$response2$data;throw new Error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Failed to fetch menu');}},// Add new menu item\naddMenuItem:async menuItem=>{try{const response=await api.post('/menu/add',menuItem);return response.data;}catch(error){var _error$response3,_error$response3$data;throw new Error(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Failed to add menu item');}},// Update menu item\nupdateMenuItem:async(id,menuItem)=>{try{const response=await api.put(\"/menu/\".concat(id),menuItem);return response.data;}catch(error){var _error$response4,_error$response4$data;throw new Error(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||'Failed to update menu item');}},// Delete menu item\ndeleteMenuItem:async id=>{try{const response=await api.delete(\"/menu/\".concat(id));return response.data;}catch(error){var _error$response5,_error$response5$data;throw new Error(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||'Failed to delete menu item');}},// Search all menu items across all categories\nsearchMenu:async(slug,searchTerm)=>{try{const response=await api.get(\"/menu/\".concat(slug,\"/search\"),{params:{q:searchTerm}});return response.data;}catch(error){var _error$response6,_error$response6$data;throw new Error(((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.message)||'Failed to search menu');}},// Search items within a specific category\nsearchCategory:async(slug,categoryName,searchTerm)=>{try{const response=await api.get(\"/menu/\".concat(slug,\"/category/\").concat(encodeURIComponent(categoryName),\"/search\"),{params:{q:searchTerm}});return response.data;}catch(error){var _error$response7,_error$response7$data;throw new Error(((_error$response7=error.response)===null||_error$response7===void 0?void 0:(_error$response7$data=_error$response7.data)===null||_error$response7$data===void 0?void 0:_error$response7$data.message)||'Failed to search category');}}};export const qrAPI={// Generate QR code for restaurant\ngenerateQR:async function(slug){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{const response=await api.get(\"/qr/\".concat(slug),{params:options});return response.data;}catch(error){var _error$response8,_error$response8$data;throw new Error(((_error$response8=error.response)===null||_error$response8===void 0?void 0:(_error$response8$data=_error$response8.data)===null||_error$response8$data===void 0?void 0:_error$response8$data.message)||'Failed to generate QR code');}},// Download QR code as PNG\ndownloadQR:async function(slug){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{const response=await api.get(\"/qr/\".concat(slug,\"/download\"),{params:options,responseType:'blob'});return response.data;}catch(error){var _error$response9,_error$response9$data;throw new Error(((_error$response9=error.response)===null||_error$response9===void 0?void 0:(_error$response9$data=_error$response9.data)===null||_error$response9$data===void 0?void 0:_error$response9$data.message)||'Failed to download QR code');}}};// Health check\nexport const healthCheck=async()=>{try{const response=await api.get('/health');return response.data;}catch(error){throw new Error('API is not available');}};export default api;","map":{"version":3,"names":["axios","getApiUrl","hostname","window","location","concat","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","data","message","menuAPI","getMenu","slug","get","_error$response2","_error$response2$data","Error","addMenuItem","menuItem","post","_error$response3","_error$response3$data","updateMenuItem","id","put","_error$response4","_error$response4$data","deleteMenuItem","delete","_error$response5","_error$response5$data","searchMenu","searchTerm","params","q","_error$response6","_error$response6$data","searchCategory","categoryName","encodeURIComponent","_error$response7","_error$response7$data","qrAPI","generateQR","options","arguments","length","undefined","_error$response8","_error$response8$data","downloadQR","responseType","_error$response9","_error$response9$data","healthCheck"],"sources":["C:/menu card/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with base URL\r\n// Dynamically determine API URL based on current host\r\nconst getApiUrl = () => {\r\n  const hostname = window.location.hostname;\r\n  if (hostname === 'localhost' || hostname === '127.0.0.1') {\r\n    return 'http://localhost:5000/api';\r\n  } else {\r\n    // For network access, use the same hostname but port 5000\r\n    return `http://${hostname}:5000/api`;\r\n  }\r\n};\r\n\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || getApiUrl(),\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`Making ${config.method?.toUpperCase()} request to: ${config.url}`);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(`Response from ${response.config.url}:`, response.status);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('Response error:', error.response?.data || error.message);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// API functions\r\nexport const menuAPI = {\r\n  // Get menu for a restaurant by slug\r\n  getMenu: async (slug) => {\r\n    try {\r\n      const response = await api.get(`/menu/${slug}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to fetch menu');\r\n    }\r\n  },\r\n\r\n  // Add new menu item\r\n  addMenuItem: async (menuItem) => {\r\n    try {\r\n      const response = await api.post('/menu/add', menuItem);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to add menu item');\r\n    }\r\n  },\r\n\r\n  // Update menu item\r\n  updateMenuItem: async (id, menuItem) => {\r\n    try {\r\n      const response = await api.put(`/menu/${id}`, menuItem);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to update menu item');\r\n    }\r\n  },\r\n\r\n  // Delete menu item\r\n  deleteMenuItem: async (id) => {\r\n    try {\r\n      const response = await api.delete(`/menu/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to delete menu item');\r\n    }\r\n  },\r\n\r\n  // Search all menu items across all categories\r\n  searchMenu: async (slug, searchTerm) => {\r\n    try {\r\n      const response = await api.get(`/menu/${slug}/search`, {\r\n        params: { q: searchTerm }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to search menu');\r\n    }\r\n  },\r\n\r\n  // Search items within a specific category\r\n  searchCategory: async (slug, categoryName, searchTerm) => {\r\n    try {\r\n      const response = await api.get(`/menu/${slug}/category/${encodeURIComponent(categoryName)}/search`, {\r\n        params: { q: searchTerm }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to search category');\r\n    }\r\n  },\r\n};\r\n\r\nexport const qrAPI = {\r\n  // Generate QR code for restaurant\r\n  generateQR: async (slug, options = {}) => {\r\n    try {\r\n      const response = await api.get(`/qr/${slug}`, { params: options });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to generate QR code');\r\n    }\r\n  },\r\n\r\n  // Download QR code as PNG\r\n  downloadQR: async (slug, options = {}) => {\r\n    try {\r\n      const response = await api.get(`/qr/${slug}/download`, { \r\n        params: options,\r\n        responseType: 'blob'\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to download QR code');\r\n    }\r\n  },\r\n};\r\n\r\n// Health check\r\nexport const healthCheck = async () => {\r\n  try {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('API is not available');\r\n  }\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}